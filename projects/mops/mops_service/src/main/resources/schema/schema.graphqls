# API root

type Query {
  allBudgets: [Budget!]!
  allLineItems: [LineItem!]!
  allCategories: [Category!]!
  allActivities: [Activity!]!
  clientConfiguration: ClientConfiguration!
  chat(id: ID!): Chat
}

type Mutation {
  provisionTenant(input: ProvisionTenantInput!): ProvisionTenantResponse!
  createBudget(input: CreateBudgetInput!): CreateBudgetResponse!
  addLineItem(input: AddLineItemInput!): AddLineItemResponse!
  createCategory(input: CreateCategoryInput!): CreateCategoryResponse!
  updateCategoryName(
    input: UpdateCategoryNameInput!
  ): UpdateCategoryNameResponse!
  addCategoryValue(input: AddCategoryValueInput!): AddCategoryValueResponse!
  updateCategoryValueName(
    input: UpdateCategoryValueNameInput!
  ): UpdateCategoryValueNameResponse!
  categorizeLineItem(
    input: CategorizeLineItemInput!
  ): CategorizeLineItemResponse!
  deleteAllLineItems: DeleteAllLineItemsResponse!
  planSpend(input: PlanSpendInput!): PlanSpendResponse!
  createActivity(input: CreateActivityInput!): CreateActivityResponse!
  startChat(input: StartChatInput!): StartChatResponse!
  addUserMessage(input: AddUserMessageInput!): AddUserMessageResponse!
  editUserMessage(input: EditUserMessageInput!): EditUserMessageResponse!
  retryAssistantMessage(
    input: RetryAssistantMessageInput!
  ): RetryAssistantMessageResponse!
}

type Subscription {
  counter: Long!
}

# Objects

type Tenant {
  id: ID!
  name: String!
}

type Budget {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
}

type LineItem {
  id: ID!
  budgetId: ID!
  name: String!
  categorizations: [Categorization!]!
  spending: [Spend!]!
  spendTotals: SpendTotals!
  createdAt: String!
  updatedAt: String!
}

type Categorization {
  category: Category!
  categoryValue: CategoryValue!
}

type Category {
  id: ID!
  name: String!
  values: [CategoryValue!]!
  createdAt: String!
  updatedAt: String!
}

type CategoryValue {
  id: ID!
  name: String!
}

type Spend {
  amount: BigDecimal!
  day: Date!
}

type SpendTotals {
  monthlyTotals: [MonthlyTotal!]!
  quarterlyTotals: [QuarterlyTotal!]!
  annualTotals: [AnnualTotal!]!
  grandTotal: BigDecimal!
}

type MonthlyTotal {
  month: Month!
  year: Int!
  total: BigDecimal!
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

type QuarterlyTotal {
  quarter: Quarter!
  fiscalYear: Int!
  total: BigDecimal!
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}

type AnnualTotal {
  year: Int!
  total: BigDecimal!
}

type ClientConfiguration {
  statsigKey: String
}

type Activity {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
}

type Chat {
  id: ID!
  messages: [ChatMessage!]!
  createdAt: String!
  updatedAt: String!
}

type ChatMessage {
  id: ID!
  type: ChatMessageType!
  status: ChatMessageStatus!
  content: String
  createdAt: String!
  updatedAt: String!
}

enum ChatMessageType {
  USER
  ASSISTANT
}

enum ChatMessageStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

# Inputs

input ProvisionTenantInput {
  name: String!
}

input CreateBudgetInput {
  name: String!
}

input AddLineItemInput {
  budgetId: ID!
  name: String!
  categorizations: [CategorizationInput!]
}

input CategorizationInput {
  categoryId: String!
  categoryValueId: String!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryNameInput {
  categoryId: ID!
  name: String!
}

input AddCategoryValueInput {
  categoryId: ID!
  name: String!
}

input UpdateCategoryValueNameInput {
  categoryId: ID!
  categoryValueId: ID!
  name: String!
}

input CategorizeLineItemInput {
  lineItemId: ID!
  categoryId: ID!
  categoryValueId: ID!
}

input PlanSpendInput {
  lineItemId: ID!
  spendInput: SpendInput!
}

input SpendInput {
  spendDay: Date!
  amount: BigDecimal!
}

input CreateActivityInput {
  name: String!
}

input StartChatInput {
  content: String!
}

input AddUserMessageInput {
  chatId: ID!
  content: String!
}

input EditUserMessageInput {
  chatId: ID!
  messageId: ID!
  content: String!
}

input RetryAssistantMessageInput {
  chatId: ID!
  messageId: ID!
}

# Responses

type ProvisionTenantResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  tenant: Tenant
}

type CreateBudgetResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  budget: Budget
}

type AddLineItemResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  lineItem: LineItem
}

type CreateCategoryResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  category: Category
}

type UpdateCategoryNameResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  category: Category
}

type AddCategoryValueResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  categoryValue: CategoryValue
}

type UpdateCategoryValueNameResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  categoryValue: CategoryValue
}

type CategorizeLineItemResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  lineItem: LineItem!
}

type DeleteAllLineItemsResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

type PlanSpendResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  lineItem: LineItem
}

type CreateActivityResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  activity: Activity
}

interface MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

type StartChatResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  chat: Chat
}

type AddUserMessageResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  chat: Chat
}

type EditUserMessageResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  chat: Chat
}

type RetryAssistantMessageResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  chat: Chat
}

# Scalars

scalar Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

scalar BigDecimal

scalar Long
