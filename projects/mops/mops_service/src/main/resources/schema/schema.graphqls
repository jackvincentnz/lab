# API root

type Query {
  allBudgets: [Budget!]!
  allLineItems: [LineItem!]!
  allCategories: [Category!]!
  clientConfiguration: ClientConfiguration!
}

type Mutation {
  provisionTenant(input: ProvisionTenantInput!): ProvisionTenantResponse!
  createBudget(input: CreateBudgetInput!): CreateBudgetResponse!
  addLineItem(input: AddLineItemInput!): AddLineItemResponse!
  createCategory(input: CreateCategoryInput!): CreateCategoryResponse!
  updateCategoryName(
    input: UpdateCategoryNameInput!
  ): UpdateCategoryNameResponse!
  addCategoryValue(input: AddCategoryValueInput!): AddCategoryValueResponse!
  updateCategoryValueName(
    input: UpdateCategoryValueNameInput!
  ): UpdateCategoryValueNameResponse!
  categorizeLineItem(
    input: CategorizeLineItemInput!
  ): CategorizeLineItemResponse!
  deleteAllLineItems: DeleteAllLineItemsResponse!
  planSpend(input: PlanSpendInput!): PlanSpendResponse!
}

# Objects

type Tenant {
  id: ID!
  name: String!
}

type Budget {
  id: ID!
  name: String!
}

type LineItem {
  id: ID!
  budgetId: ID!
  name: String!
  categorizations: [Categorization!]!
  spending: [Spend!]!
}

type Categorization {
  category: Category!
  categoryValue: CategoryValue!
}

type Category {
  id: ID!
  name: String!
  values: [CategoryValue!]!
}

type CategoryValue {
  id: ID!
  name: String!
}

type Spend {
  amount: BigDecimal!
  day: Date!
}

type ClientConfiguration {
  statsigKey: String
}

# Inputs

input ProvisionTenantInput {
  name: String!
}

input CreateBudgetInput {
  name: String!
}

input AddLineItemInput {
  budgetId: ID!
  name: String!
  categorizations: [CategorizationInput!]
}

input CategorizationInput {
  categoryId: String!
  categoryValueId: String!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryNameInput {
  categoryId: ID!
  name: String!
}

input AddCategoryValueInput {
  categoryId: ID!
  name: String!
}

input UpdateCategoryValueNameInput {
  categoryId: ID!
  categoryValueId: ID!
  name: String!
}

input CategorizeLineItemInput {
  lineItemId: ID!
  categoryId: ID!
  categoryValueId: ID!
}

input PlanSpendInput {
  lineItemId: ID!
  spendInput: SpendInput!
}

input SpendInput {
  spendDay: Date!
  amount: BigDecimal!
}

# Responses

type ProvisionTenantResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  tenant: Tenant
}

type CreateBudgetResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  budget: Budget
}

type AddLineItemResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  lineItem: LineItem
}

type CreateCategoryResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  category: Category
}

type UpdateCategoryNameResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  category: Category
}

type AddCategoryValueResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  categoryValue: CategoryValue
}

type UpdateCategoryValueNameResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  categoryValue: CategoryValue
}

type CategorizeLineItemResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  lineItem: LineItem!
}

type DeleteAllLineItemsResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

type PlanSpendResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  lineItem: LineItem
}

interface MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

# Scalars

scalar Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

scalar BigDecimal
