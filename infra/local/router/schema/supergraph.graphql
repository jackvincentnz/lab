schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input AddEntryInput
  @join__type(graph: JOURNAL)
{
  message: String!
}

input AddTaskInput
  @join__type(graph: TASK)
{
  title: String!
}

type Author
  @join__type(graph: JOURNAL)
{
  id: ID!
  name: String!
}

type Entry
  @join__type(graph: JOURNAL)
{
  id: ID!
  message: String!
  createdAt: String!
  author: Author!
}

scalar join__FieldSet

enum join__Graph {
  JOURNAL @join__graph(name: "journal", url: "http://host.docker.internal:3003/graphql")
  TASK @join__graph(name: "task", url: "http://host.docker.internal:3001/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

input MarkTaskCompletedInput
  @join__type(graph: TASK)
{
  id: ID!
}

type Mutation
  @join__type(graph: JOURNAL)
  @join__type(graph: TASK)
{
  addEntry(input: AddEntryInput!): Entry @join__field(graph: JOURNAL)
  addTask(input: AddTaskInput!): Task! @join__field(graph: TASK)
  markTaskCompleted(input: MarkTaskCompletedInput!): Task! @join__field(graph: TASK)
}

type Query
  @join__type(graph: JOURNAL)
  @join__type(graph: TASK)
{
  allEntries(entryFilter: String): [Entry!]! @join__field(graph: JOURNAL)
  allTasks: [Task!]! @join__field(graph: TASK)
  task(id: ID!): Task @join__field(graph: TASK)
}

type Task
  @join__type(graph: TASK)
{
  id: ID!
  title: String!
  isCompleted: Boolean!
}
