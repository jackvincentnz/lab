# Local port reservations:
# 3000: tasklist
# 3001: task
# 3002: autojournal
# 3003: journal
# 3004: journal_app
# 3005: bubbles
# 4000: router
# 8080: proxy

---
version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.6.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 10

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"

  task:
    image: jackvincent/lab-task:latest
    platform: linux/amd64
    hostname: task
    container_name: task
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "broker:29092"
      SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  journal:
    image: jackvincent/lab-journal:latest
    platform: linux/amd64
    hostname: journal
    container_name: journal
    ports:
      - "3003:3003"

  autojournal:
    image: jackvincent/lab-autojournal:latest
    platform: linux/amd64
    hostname: autojournal
    container_name: autojournal
    depends_on:
      broker:
        condition: service_healthy
      task:
        condition: service_started
      journal:
        condition: service_started
    ports:
      - "3002:3002"
    environment:
      LAB_SERVICES_TASK_GRAPHQL_URL: http://host.docker.internal:3001/graphql
      LAB_SERVICES_JOURNAL_GRAPHQL_URL: http://host.docker.internal:3003/graphql
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "broker:29092"
      SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    extra_hosts:
      - "host.docker.internal:host-gateway"

  tasklist:
    image: jackvincent/lab-tasklist:latest
    hostname: tasklist
    container_name: tasklist
    ports:
      - "3000:80"

  journal_app:
    image: jackvincent/lab-journal-app:latest
    hostname: journal_app
    container_name: journal_app
    ports:
      - "3004:80"

  proxy:
    image: lab/proxy:latest
    hostname: proxy
    container_name: proxy
    depends_on:
      - router
      - tasklist
      - journal_app
    ports:
      - "8080:8080"
    environment:
      NGINX_PORT: 8080
      TASK_APP_HOST: http://host.docker.internal:3000
      JOURNAL_APP_HOST: http://host.docker.internal:3004
      ROUTER_HOST: http://host.docker.internal:4000
    extra_hosts:
      - "host.docker.internal:host-gateway"

  router:
    image: ghcr.io/apollographql/router:v1.43.2
    hostname: router
    container_name: router
    depends_on:
      - task
      - journal
    ports:
      - "4000:4000"
    volumes:
      - type: bind
        source: ./router/schema/supergraph.graphql
        target: /dist/schema/local.graphql
      - type: bind
        source: ./router/config/router.conf
        target: /dist/config/router.conf
    environment:
      APOLLO_ROUTER_SUPERGRAPH_PATH: schema/local.graphql
      APOLLO_ROUTER_CONFIG_PATH: config/router.conf
      TASK_ROUTING_URL: http://host.docker.internal:3001/graphql
      JOURNAL_ROUTING_URL: http://host.docker.internal:3003/graphql
    command: --hot-reload
    extra_hosts:
      - "host.docker.internal:host-gateway"

  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    shm_size: 128mb
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "admin"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
