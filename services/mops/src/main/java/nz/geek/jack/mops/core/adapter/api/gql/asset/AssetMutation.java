package nz.geek.jack.mops.core.adapter.api.gql.asset;

import com.netflix.graphql.dgs.DgsComponent;
import com.netflix.graphql.dgs.DgsMutation;
import com.netflix.graphql.dgs.InputArgument;
import nz.geek.jack.mops.core.application.asset.AssetCommandService;
import nz.geek.jack.mops.core.application.asset.CreateAssetCommand;
// These types are expected to be generated by DGS codegen from the schema
import nz.geek.jack.mops.types.CreateAssetInput;
import nz.geek.jack.mops.types.CreateAssetResponse;
import nz.geek.jack.mops.types.Asset; // GraphQL type for response
// This is the domain type returned by AssetCommandService
import nz.geek.jack.mops.core.domain.asset.AssetDomain; // Renamed to avoid clash with generated type


@DgsComponent
public class AssetMutation {

    private final AssetCommandService assetCommandService;

    public AssetMutation(AssetCommandService assetCommandService) {
        this.assetCommandService = assetCommandService;
    }

    @DgsMutation
    public CreateAssetResponse createAsset(@InputArgument CreateAssetInput input) {
        var command = new CreateAssetCommand(input.getName());

        // Call the application service. It returns nz.geek.jack.mops.core.domain.asset.Asset
        // Renaming domain Asset to AssetDomain locally to avoid import collision with generated nz.geek.jack.mops.types.Asset
        nz.geek.jack.mops.core.domain.asset.Asset createdDomainAsset = assetCommandService.create(command);

        // Map the domain Asset to the GraphQL Asset type (nz.geek.jack.mops.types.Asset)
        Asset graphQlAsset = Asset.newBuilder()
                                  .id(createdDomainAsset.getId().toString()) // Assuming domain Asset's getId() returns something with toString()
                                  .name(createdDomainAsset.getName())
                                  .build();

        // Build and return the response (nz.geek.jack.mops.types.CreateAssetResponse)
        // The 'code' field from MutationResponse might be set automatically by DGS/Spring Boot aspects for successful responses.
        // If not, it might need to be explicitly set, e.g. .code(200)
        return CreateAssetResponse.newBuilder()
                                  .success(true)
                                  .message("Asset created successfully")
                                  .asset(graphQlAsset)
                                  .build();
    }
}
