###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

bazel_dep(name = "aspect_bazel_lib", version = "2.8.1")
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "contrib_rules_jvm", version = "0.27.0")
bazel_dep(name = "rules_nodejs", version = "6.3.0")
bazel_dep(name = "aspect_rules_js", version = "2.2.0")
bazel_dep(name = "aspect_rules_ts", version = "3.1.0")
bazel_dep(name = "aspect_rules_jest", version = "0.22.0")
bazel_dep(name = "aspect_rules_swc", version = "2.0.0")
bazel_dep(name = "aspect_rules_cypress", version = "0.7.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_oci", version = "2.0.0")
bazel_dep(name = "rules_multirun", version = "0.12.0")

####################################################################################################
# aspect_bazel_lib setup
####################################################################################################

bazel_lib_toolchains = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")
use_repo(bazel_lib_toolchains, "jq_toolchains")

####################################################################################################
# maven setup
####################################################################################################

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

# Maven lock file will need to be updated whenever the artifacts or repositories change.
# See: https://github.com/bazelbuild/rules_jvm_external#requiring-lock-file-repinning-when-the-list-of-artifacts-changes
# To re-pin everything, run:
# REPIN=1 bazel run @maven//:pin
maven.install(
    artifacts = [
        "com.fasterxml.jackson.core:jackson-databind",
        "com.h2database:h2",
        "com.mysql:mysql-connector-j",
        "org.apache.commons:commons-lang3",
        "org.apache.kafka:kafka-clients",
        "org.apache.kafka:kafka-metadata",
        "org.apache.kafka:kafka-raft",
        "org.apache.kafka:kafka-server-common",
        "org.apache.kafka:kafka-storage",
        "org.apache.kafka:kafka-storage-api",
        "org.apache.kafka:kafka-streams",
        "org.apache.kafka:kafka-streams-test-utils",
        "org.apache.kafka:kafka_2.13",
        "org.eclipse.jetty:jetty-reactive-httpclient",
        "org.flywaydb:flyway-core",
        "org.springframework.ai:spring-ai-starter-mcp-server-webmvc",
        "org.springframework.ai:spring-ai-starter-model-openai",
        "org.springframework.boot:spring-boot-loader",
        "org.springframework.boot:spring-boot-starter-actuator",
        "org.springframework.boot:spring-boot-starter-jdbc",
        "org.springframework.boot:spring-boot-starter-security",
        "org.springframework.boot:spring-boot-starter-validation",
        "org.springframework.boot:spring-boot-starter-web",
        "org.springframework.boot:spring-boot-starter-webflux",
        "org.springframework.data:spring-data-jdbc",
        "org.springframework.kafka:spring-kafka",
        "redis.clients:jedis",
        "org.postgresql:postgresql",
        "org.springframework.boot:spring-boot-starter-test",
        "org.springframework.kafka:spring-kafka-test",
        "org.testcontainers:testcontainers",
        "org.testcontainers:junit-jupiter",
        "org.testcontainers:kafka",
        "org.testcontainers:postgresql",
        "org.junit.platform:junit-platform-launcher",
        "org.junit.platform:junit-platform-reporting",
        "com.netflix.graphql.dgs:dgs-starter",
        "com.netflix.graphql.dgs:dgs-starter-test",
        "com.netflix.graphql.dgs:graphql-dgs-extended-scalars",
        "jakarta.servlet:jakarta.servlet-api",
        "io.confluent:kafka-protobuf-serializer:7.5.6",  # attempting to upgrade beyond this ran into serialization issues, likely due to protobuf version mismatch in the workspace
        "org.apache.avro:avro:1.11.4",  # overriding from io.confluent:kafka-protobuf-serializer to resolve vulnerability
        "org.wiremock:wiremock-jetty12:3.12.1",
        "com.netflix.graphql.dgs.codegen:graphql-dgs-codegen-core:7.0.3",
        "com.github.ajalt.clikt:clikt-jvm:4.4.0",  # explicitly depend on the jvm version rather than the kotlin one linked from com.netflix.graphql.dgs.codegen:graphql-dgs-codegen-core
        "com.squareup.okhttp3:okhttp:4.12.0",
        "com.github.package-url:packageurl-java:1.5.0",
        "com.google.adk:google-adk-dev:0.2.0",
    ],
    boms = [
        "org.springframework.boot:spring-boot-dependencies:3.5.3",
        "org.springframework.ai:spring-ai-bom:1.0.0",
        "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:10.2.4",
        "com.google.protobuf:protobuf-bom:3.25.5",
    ],
    # fail_if_repin_required = True, TODO: renable when fixed - https://github.com/bazel-contrib/rules_jvm_external/issues/1328
    fetch_sources = True,
    lock_file = "//:maven_install.json",
    repositories = [
        "https://repo1.maven.org/maven2",
        "https://packages.confluent.io/maven",
    ],
)
maven.override(
    # bazel resolves kotlin artifact rather than jvm one which doesn't contain expected classes for gql codegen
    coordinates = "com.github.ajalt.clikt:clikt",
    target = "@maven//:com_github_ajalt_clikt_clikt_jvm",
)
use_repo(
    maven,
    "maven",
)

####################################################################################################
# rules_nodejs setup
####################################################################################################

node = use_extension(
    "@rules_nodejs//nodejs:extensions.bzl",
    "node",
    dev_dependency = True,
)
node.toolchain(node_version = "18.20.4")  # keep in sync with package.json

####################################################################################################
# aspect_rules_js setup
####################################################################################################

npm = use_extension(
    "@aspect_rules_js//npm:extensions.bzl",
    "npm",
    dev_dependency = True,
)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    public_hoist_packages = {
        "@vitest/expect": [""],
        "@jest/expect": [""],
    },
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

####################################################################################################
# aspect_rules_ts setup
####################################################################################################

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

####################################################################################################
# rules_cypress setup
####################################################################################################

cypress = use_extension(
    "@aspect_rules_cypress//cypress:extensions.bzl",
    "cypress",
    dev_dependency = True,
)
cypress.toolchain(cypress_version = "13.7.3")
use_repo(cypress, "cypress_toolchains")

register_toolchains("@cypress_toolchains//:all")

####################################################################################################
# rules_oci setup
####################################################################################################

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_java",
    digest = "sha256:98667f976e475bcb059e256477d3c72a885ab6b26459214609c8c39e90394f5d",
    image = "gcr.io/distroless/java17-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
oci.pull(
    name = "nginx_alpine_slim",
    image = "nginx",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
    reproducible = False,
    tag = "stable-alpine-slim",
)
oci.pull(
    name = "debian",
    digest = "sha256:3d868b5eb908155f3784317b3dda2941df87bbbbaa4608f84881de66d9bb297b",
    image = "debian",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
use_repo(oci, "debian", "debian_linux_amd64", "debian_linux_arm64_v8", "distroless_java", "distroless_java_linux_amd64", "distroless_java_linux_arm64_v8", "nginx_alpine_slim", "nginx_alpine_slim_linux_amd64", "nginx_alpine_slim_linux_arm64_v8", "oci_crane_toolchains")
