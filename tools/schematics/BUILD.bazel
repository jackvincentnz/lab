
load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("@npm//@bazel/jasmine:index.bzl", "jasmine_node_test")
load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin")

package(default_visibility = ["//:__subpackages__"])

ts_project(
    name = "schematics",

    tsconfig = "//:tsconfig.json",
    source_map = True,
    declaration = True,

    # glob is a quick way to select all the code,
    # but has performance penalty in that Bazel must evaluate it.
    srcs = glob(
        include = ["**/*.ts"],
        exclude = [
            "**/*.spec.ts",
        ],
    ),
    data = ["collection.json"],
    deps = [
        "@npm//@types/node",
        "@npm//@angular-devkit/schematics", 
        "@npm//@schematics/angular", 
    ],
)

ts_project(
    name = "schematics-test-lib",
    testonly = True,

    tsconfig = "//:tsconfig.json",
    source_map = True,
    declaration = True,

    srcs = glob(
        include = [
            "**/*.spec.ts",
        ],
    ),
    deps = [
        ":schematics",
        "@npm//@angular-devkit/schematics", 
        "@npm//@types/jasmine",
        "@npm//jasmine-core",
        "@npm//tslib",
        "@npm//@schematics/angular", 
    ],
)

jasmine_node_test(
    name = "schematics-test",
    # Workaround for https://github.com/bazelbuild/rules_nodejs/issues/3280
    # The @bazel/jasmine package is installed as a directory, so we need to use a dictionary
    # to give a nested path to the entry point in that directory.
    jasmine_entry_point = {"@npm//:node_modules/@bazel/jasmine": "jasmine_runner.js"},
    deps = [":schematics-test-lib"],   
)

copy_to_bin(
    name = "package",
    srcs = [
        "collection.json", 
        "package.json"
    ]
)