name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  # Cancel previous actions from the same PR: https://stackoverflow.com/a/72408109
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  common_ci:
    runs-on: ubuntu-latest
    env:
      BAZELISK_HOME: ~/.cache/bazel-repo
      BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false # this slows down build by ~1.5 minutes due to apt-get interactions
          docker-images: true
          swap-storage: true

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          # Increase fetch-depth if checkout is taking a long time.
          # Depth 0 defaults to fetching all history.
          # We need at least enough history to contain the most recent weekly-tag for versioning purposes commits per week.
          # Max commits per week + some buffer would be a good depth.
          fetch-depth: 0
          fetch-tags: true

      - name: Print build version
        run: tools/bazel/output_workspace_status.sh

      # Cache build and external artifacts so that the next ci build is incremental.
      # Because github action caches cannot be updated after a build, we need to
      # store the contents of each build in a unique cache key, then fall back to loading
      # it on the next ci run. We use hashFiles(...) in the key and restore-keys- with
      # the prefix to load the most recent cache for the branch on a cache miss. You
      # should customize the contents of hashFiles to capture any bazel input sources,
      # although this doesn't need to be perfect. If none of the input sources change
      # then a cache hit will load an existing cache and bazel won't have to do any work.
      # In the case of a cache miss, you want the fallback cache to contain most of the
      # previously built artifacts to minimize build time. The more precise you are with
      # hashFiles sources the less work bazel will have to do.
      - name: Mount caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel
            ${{ env.BAZELISK_HOME }}
          key: bazel-cache-${{ hashFiles('**/BUILD.bazel', '**/*.bzl', 'WORKSPACE') }}
          restore-keys: bazel-cache-

      - name: Build & test
        run: |
          bazel \
            --bazelrc=${GITHUB_WORKSPACE//\\/\/}/.aspect/bazelrc/ci.bazelrc \
            --bazelrc=${GITHUB_WORKSPACE//\\/\/}/.github/workflows/ci.bazelrc \
            test \
            --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }} \
            //...

      - name: Copy test reports out of symlink forest
        if: success() || failure()
        run: mkdir -p tmp/testlogs && find dist/testlogs/ -name "test.xml" -exec rsync -RL {} tmp/testlogs \;

      - name: Publish test report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure()
        with:
          report_paths: "tmp/testlogs/**/test.xml"
          check_name: "publish_test_report"

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deliver artifacts
        if: github.ref == 'refs/heads/main'
        run: tools/bazel/deliver_changed.sh

      # TODO: Avoid rebuilding and retesting tests with coverage
      - name: Generate coverage report
        run: |
          bazel \
            --bazelrc=${GITHUB_WORKSPACE//\\/\/}/.aspect/bazelrc/ci.bazelrc \
            --bazelrc=${GITHUB_WORKSPACE//\\/\/}/.github/workflows/ci.bazelrc \
            coverage \
            --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }} \
            --combined_report=lcov \
            $(bazel query 'kind("java_test", //...)')

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./dist/out/_coverage/_coverage_report.dat
          fail_ci_if_error: true

  pull_request_ci:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup python
        uses: actions/setup-python@v5

      - name: Check format, linting and style
        uses: pre-commit/action@v3.0.1
